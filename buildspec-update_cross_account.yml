version: 0.2 

env:
  variables:
    FUNCTION_NAME: lambda-go-auth-apigw
    ALIAS_NAME: live
    BUCKET_NAME: codepipeline-us-east-2-237656914886
    BUCKET_FOLDER_NAME: lambda-go-auth-apigw
    CODEDEPLOY_APPLICATION_NAME: lambda-go-auth-apigw-deploy
    CODEDEPLOY_APPLICATION_GROUP: lambda-go-auth-apigw-deploy-group
    REGION_DEPLOYMENT: us-east-2
    CODE_BUILD_ROLE_ARN: arn:aws:iam::992382474575:role/crossaccount-target-role
    ROLE_SESSION_NAME: crossaccount-dev-role

phases:
  pre_build: 
    commands: 
      - echo PRE_BUILD show enviroment variables ...
      - echo $FUNCTION_NAME
      - echo $BUCKET_NAME
      - echo $BUCKET_FOLDER_NAME
      - echo $CODEDEPLOY_APPLICATION_NAME
      - echo $CODEDEPLOY_APPLICATION_GROUP
      - echo $REGION_DEPLOYMENT

      - aws sts get-caller-identity

      - echo $CODE_BUILD_ROLE_ARN
      - echo $ROLE_SESSION_NAME

      - CREDENTIALS=$(aws sts assume-role --role-arn $CODE_BUILD_ROLE_ARN --role-session-name $ROLE_SESSION_NAME --duration-seconds 900)

      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')" 
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')" 
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')" 
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration') 
   
      - aws sts get-caller-identity
      
  build: 
    commands: 
      - echo BUILD update lambda-function...
      - echo aws lambda update-function-code --function-name ${FUNCTION_NAME} --s3-bucket ${BUCKET_NAME} --s3-key ${FUNCTION_NAME}/main.zip
      - LAMBDA_NEW_VERSION=$(aws lambda update-function-code --function-name ${FUNCTION_NAME} --s3-bucket ${BUCKET_NAME} --s3-key ${FUNCTION_NAME}/main.zip --publish | jq '.Version')
      - echo LAMBDA_NEW_VERSION $LAMBDA_NEW_VERSION 

  post_build: 
      commands: 
      - echo POST_BUILD setting appspec Function... 

      - LAMBDA_ALIAS_VERSION_CURRENT=$(aws lambda get-alias --function-name ${FUNCTION_NAME} --name ${ALIAS_NAME}| jq '.FunctionVersion')
      - echo LAMBDA_ALIAS_VERSION_CURRENT $LAMBDA_ALIAS_VERSION_CURRENT

      - echo Create appspec.yml...
      - sed -e 's/$Name/'${FUNCTION_NAME}'/g' -e 's/$Alias/'${ALIAS_NAME}'/g' -e 's/$TargetVersion/'$LAMBDA_NEW_VERSION'/g' -e 's/$CurrentVersion/'$LAMBDA_ALIAS_VERSION_CURRENT'/g' appspec.yml
      - sed -i -e 's/$Name/'${FUNCTION_NAME}'/g' -e 's/$Alias/'${ALIAS_NAME}'/g' -e 's/$TargetVersion/'$LAMBDA_NEW_VERSION'/g' -e 's/$CurrentVersion/'$LAMBDA_ALIAS_VERSION_CURRENT'/g' appspec.yml

      - echo Copy appspec.yml ...
      - aws s3 cp appspec.yml s3://${BUCKET_NAME}/${BUCKET_FOLDER_NAME}/

      - echo Start CodeDeploy rollout...
      - echo aws deploy create-deployment --region=${REGION_DEPLOYMENT} --application-name ${CODEDEPLOY_APPLICATION_NAME} --deployment-group-name ${CODEDEPLOY_APPLICATION_GROUP} --s3-location bucket=${BUCKET_NAME}/${BUCKET_FOLDER_NAME},bundleType=yaml,key=appspec.yml
      - aws deploy create-deployment --region=${REGION_DEPLOYMENT} --application-name ${CODEDEPLOY_APPLICATION_NAME} --deployment-group-name ${CODEDEPLOY_APPLICATION_GROUP} --s3-location bucket=${BUCKET_NAME}/${BUCKET_FOLDER_NAME},bundleType=yaml,key=appspec.yml

artifacts:
  files:
    - '**/appspec.yml'